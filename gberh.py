import streamlit as st
import pandas as pd

language = st.radio("üåê Language / –ú–æ–≤–∞:", ["–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", "English"])


t = {
    "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞": {
        "title": "Noise Robot ü§ñ",
        "desc": "–í–∏–∑–Ω–∞—á–∞—é —Ä—ñ–≤–µ–Ω—å —à—É–º—É, –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª—é–¥–µ–π —Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏–π —á–∞—Å –ø–µ—Ä–µ–±—É–≤–∞–Ω–Ω—è",
        "time_label": "üïí –Ø–∫–∞ –≥–æ–¥–∏–Ω–∞ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å?",
        "place_label": "üìç –Ø–∫–µ –º—ñ—Å—Ü–µ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å?",
        "safe": "‚úÖ –†—ñ–≤–µ–Ω—å –±–µ–∑–ø–µ—á–Ω–∏–π, –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–±—É–≤–∞—Ç–∏ –¥–æ–≤–≥–æ (–¥–æ {time}).",
        "warn": "‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞—Ç–∏—á–Ω–∏–π –≤–ø–ª–∏–≤ –ø–æ–Ω–∞–¥ 80 –¥–ë –º–æ–∂–µ –ø–æ—à–∫–æ–¥–∏—Ç–∏ —Å–ª—É—Ö. –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –Ω–µ –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ {time} –Ω–∞ –¥–µ–Ω—å —Ç–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∑–∞—Ö–∏—Å—Ç.",
        "danger": "üö´ –†—ñ–≤–µ–Ω—å —à—É–º—É –ø–µ—Ä–µ–≤–∏—â—É—î 100 –¥–ë ‚Äî –Ω–∞–≤—ñ—Ç—å –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω –º–æ–∂—É—Ç—å –±—É—Ç–∏ –Ω–µ–±–µ–∑–ø–µ—á–Ω–∏–º–∏. –ü–µ—Ä–µ–º—ñ—Å—Ç—ñ—Ç—å—Å—è —É —Ç–∏—Ö—ñ—à–µ –º—ñ—Å—Ü–µ –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –Ω–∞–≤—É—à–Ω–∏–∫–∏ —ñ–∑ –∑–∞—Ö–∏—Å—Ç–æ–º.",
        "nodata": "–î–ª—è —Ü—å–æ–≥–æ —á–∞—Å—É –∞–±–æ –º—ñ—Å—Ü—è –ø–æ–∫–∏ –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö.",
        "graph": "üìä –î–∏–Ω–∞–º—ñ–∫–∞ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Ä—ñ–≤–Ω—è —à—É–º—É –ø—Ä–æ—Ç—è–≥–æ–º –¥–Ω—è",
        "caption": "–ù–∞ –≥—Ä–∞—Ñ—ñ–∫—É –≤–∏–¥–Ω–æ, —è–∫ –∑–º—ñ–Ω—é—î—Ç—å—Å—è —Ä—ñ–≤–µ–Ω—å —à—É–º—É –∑ 8:00 –¥–æ 19:00. –ù–∞–π–≤–∏—â–∏–π —Ä—ñ–≤–µ–Ω—å —É –¢–†–¶ –õ—é–±–∞–≤–∞, —Å–µ—Ä–µ–¥–Ω—ñ–π ‚Äî –±—ñ–ª—è –¥–æ—Ä–æ–≥–∏, –∞ –Ω–∞–π–Ω–∏–∂—á–∏–π ‚Äî —É –ø–∞—Ä–∫—É. –¶–µ –ø–æ–∫–∞–∑—É—î, —â–æ –≤—ñ–¥—Å—Ç–∞–Ω—å –≤—ñ–¥ –¥–∂–µ—Ä–µ–ª —à—É–º—É —Å—É—Ç—Ç—î–≤–æ –≤–ø–ª–∏–≤–∞—î –Ω–∞ –∫–æ–º—Ñ–æ—Ä—Ç –ª—é–¥–∏–Ω–∏.",
        "people": "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ª—é–¥–µ–π –ø–æ—Ä—É—á",
        "avg": "–°–µ—Ä–µ–¥–Ω—ñ–π —Ä—ñ–≤–µ–Ω—å —à—É–º—É",
        "at": "–£ {place} –æ {time}: {min}-{max} –¥–ë",
    },
    "English": {
        "title": "Noise Robot ü§ñ",
        "desc": "I measure the noise level, number of people, and recommend safe exposure time",
        "time_label": "üïí What time are you interested in?",
        "place_label": "üìç Which place are you interested in?",
        "safe": "‚úÖ Safe level ‚Äî you can stay for a long time (up to {time}).",
        "warn": "‚ö†Ô∏è Continuous exposure above 80 dB can damage hearing. Recommended limit: {time} per day with protection.",
        "danger": "üö´ Noise exceeds 100 dB ‚Äî even a few minutes may be dangerous. Move to a quieter area or use hearing protection.",
        "nodata": "No data for this time or place yet.",
        "graph": "üìä Noise level dynamics throughout the day",
        "caption": "This chart shows how the average noise level changes from 8:00 to 19:00. The highest levels are in the mall, medium near the road, and the lowest in the park ‚Äî showing how distance from noise sources affects comfort.",
        "people": "Number of nearby people",
        "avg": "Average noise level",
        "at": "In the {place} at {time}: {min}-{max} dB",
    }
}

st.markdown("""
    <style>
        [data-testid="stAppViewContainer"] { background-color: #E7D3BB; }
        [data-testid="stHeader"] { background-color: #E7D3BB; }
        [data-testid="stSidebar"] { background-color: #E7D3BB; }
        html, body { background-color: #E7D3BB; }
    </style>
""", unsafe_allow_html=True)

st.title(t[language]["title"])
st.write(t[language]["desc"])


data = {
    ("8:00", "–ü–∞—Ä–∫"): (46, 60, 1, 54),
    ("8:00", "–î–æ—Ä–æ–≥–∞"): (61, 83, 2, 72),
    ("9:00", "–ü–∞—Ä–∫"): (44, 81, 3, 64),
    ("9:00", "–î–æ—Ä–æ–≥–∞"): (50, 62, 2, 55),
    ("9:00", "–¢–†–¶ –õ—é–±–∞–≤–∞"): (55, 70, 3, 63),
    ("10:00", "–ü–∞—Ä–∫"): (48, 63, 3, 56),
    ("10:00", "–î–æ—Ä–æ–≥–∞"): (45, 50, 0, 47),
    ("10:00", "–¢–†–¶ –õ—é–±–∞–≤–∞"): (65, 84, 32, 75),
    ("11:00", "–ü–∞—Ä–∫"): (48, 74, 5, 80),
    ("11:00", "–î–æ—Ä–æ–≥–∞"): (49, 69, 4, 59),
    ("11:00", "–¢–†–¶ –õ—é–±–∞–≤–∞"): (58, 78, 43, 68),
    ("12:00", "–ü–∞—Ä–∫"): (45, 58, 9, 50),
    ("12:00", "–î–æ—Ä–æ–≥–∞"): (47, 77, 2, 61),
    ("12:00", "–¢–†–¶ –õ—é–±–∞–≤–∞"): (60, 84, 47, 68),
    ("13:00", "–ü–∞—Ä–∫"): (50, 82, 15, 66),
    ("13:00", "–î–æ—Ä–æ–≥–∞"): (47, 83, 4, 67),
    ("13:00", "–¢–†–¶ –õ—é–±–∞–≤–∞"): (64, 69, 85, 66),
    ("14:00", "–ü–∞—Ä–∫"): (52, 73, 7, 59),
    ("14:00", "–î–æ—Ä–æ–≥–∞"): (52, 63, 9, 56),
    ("14:00", "–¢–†–¶ –õ—é–±–∞–≤–∞"): (71, 89, 86, 84),
    ("15:00", "–ü–∞—Ä–∫"): (47, 59, 4, 50),
    ("15:00", "–î–æ—Ä–æ–≥–∞"): (52, 77, 5, 63),
    ("15:00", "–¢–†–¶ –õ—é–±–∞–≤–∞"): (70, 89, 56, 80),
    ("16:00", "–ü–∞—Ä–∫"): (46, 53, 7, 49),
    ("16:00", "–î–æ—Ä–æ–≥–∞"): (47, 70, 11, 50),
    ("16:00", "–¢–†–¶ –õ—é–±–∞–≤–∞"): (47, 70, 41, 79),
    ("17:00", "–î–æ—Ä–æ–≥–∞"): (54, 77, 15, 66),
    ("17:00", "–ü–∞—Ä–∫"): (45, 72, 12, 60),
    ("17:00", "–¢–†–¶ –õ—é–±–∞–≤–∞"): (73, 94, 58, 83),
    ("18:00", "–î–æ—Ä–æ–≥–∞"): (57, 76, 5, 65),
    ("18:00", "–ü–∞—Ä–∫"): (44, 53, 3, 47),
    ("18:00", "–¢–†–¶ –õ—é–±–∞–≤–∞"): (69, 88, 54, 82),
    ("19:00", "–î–æ—Ä–æ–≥–∞"): (57, 87, 0, 66),
    ("19:00", "–ü–∞—Ä–∫"): (47, 58, 3, 51),
    ("19:00", "–¢–†–¶ –õ—é–±–∞–≤–∞"): (65, 75, 54, 69),
}

safe_time_table = {
    80: (5, 30),
    85: (1, 45),
    90: (0, 30),
    95: (0, 10),
    100: (0, 5),
}


time = st.selectbox(t[language]["time_label"], [
    "8:00", "9:00", "10:00", "11:00", "12:00", "13:00",
    "14:00", "15:00", "16:00", "17:00", "18:00", "19:00"
])
location = st.selectbox(t[language]["place_label"], ["–ü–∞—Ä–∫", "–î–æ—Ä–æ–≥–∞", "–¢–†–¶ –õ—é–±–∞–≤–∞"])


if (time, location) in data:
    dB_min, dB_max, people, avg_db = data[(time, location)]

    st.subheader(t[language]["at"].format(place=location.lower(), time=time, min=dB_min, max=dB_max))
    st.write(f"**{t[language]['people']}:** {people}")
    st.write(f"**{t[language]['avg']}:** {avg_db} dB")

    recommended = None
    for level, (hours, mins) in sorted(safe_time_table.items()):
        if avg_db <= level:
            recommended = (hours, mins)
            break

    if recommended:
        h, m = recommended
        pretty = f"{h} –≥–æ–¥ {m} —Ö–≤" if language == "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞" else f"{h} h {m} min"
        if avg_db >= 80:
            st.warning(t[language]["warn"].format(time=pretty))
        else:
            st.success(t[language]["safe"].format(time=pretty))
    else:
        st.error(t[language]["danger"])
else:
    st.warning(t[language]["nodata"])

# --- chart ---
df = pd.DataFrame([
    {"time": t, "location": l, "avg_db": v[3]} for (t, l), v in data.items()
])
time_order = ["8:00","9:00","10:00","11:00","12:00","13:00","14:00","15:00","16:00","17:00","18:00","19:00"]
df["time"] = pd.Categorical(df["time"], categories=time_order, ordered=True)
df = df.sort_values("time")

st.subheader(t[language]["graph"])
st.line_chart(df.pivot(index="time", columns="location", values="avg_db"))
st.caption(t[language]["caption"])

#gallery#

st.subheader("üì∏ Noise Robot Gallery")

col1, col2 = st.columns(2)

with col1:
    st.image(r"C:/Users/Diana/Desktop/Genius/lubava.jpg", caption="–¢–†–¶ –õ—é–±–∞–≤–∞ / Lybava Mall", use_container_width=True)
    st.image(r"C:/Users/Diana/Desktop/Genius/park.jpg", caption="–ü–∞—Ä–∫ / Park", use_container_width=True)
    st.image(r"C:\Users\Diana\Desktop\Genius\road.png", caption="–î–æ—Ä–æ–≥–∞ / Road", use_container_width=True)


with col2:
    st.image(r"C:/Users/Diana/Desktop/Genius/night_park.jpg", caption="–ü–∞—Ä–∫ –≤–Ω–æ—á—ñ/Night Park", use_container_width=True)

    st.image("https://vycherpno.ck.ua/wp-content/uploads/2021/10/245618473_3083612635253536_7618553771366827715_n-e1634931799161.jpg", caption="–î–∏—Ç—è—á–∞ –ø–ª–æ—â–∞–¥–∫–∞ / Playground", use_container_width=True)

#streamlit run "C:\Users\Diana\Desktop\gberh.py"    